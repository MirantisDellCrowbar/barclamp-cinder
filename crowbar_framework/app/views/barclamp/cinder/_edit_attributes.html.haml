
%input#proposal_attributes{:type => "hidden", :name => "proposal_attributes", :value => @proposal.raw_data['attributes'][@proposal.barclamp].to_json}
%p
  %label{:class => "h3", :for => "proposal_attributes"}= t('.attributes')
  = link_to t('raw'), proposal_barclamp_path(:id => @proposal.name, :controller => @proposal.barclamp, :dep_raw => @dep_raw, :attr_raw => true), :style => "float: right;"
  %div.container
    %p
      %label{ :for => :mysql_instance }= t('.mysql_instance')
      = instance_selector("mysql", :mysql_instance, "mysql_instance", @proposal)
    %p
      %label{ :for => :keystone_instance }= t('.keystone_instance')
      = instance_selector("keystone", :keystone_instance, "keystone_instance", @proposal)
    %p
      %label{ :for => :glance_instance }= t('.glance_instance')
      = instance_selector("glance", :glance_instance, "glance_instance", @proposal)
    %p
      %label{ :for => :service_user }= t('.service_user')
      %input#service_user{:type => "text", :name => "service_user", :'data-default' => @proposal.raw_data['attributes'][@proposal.barclamp]["service_user"], :onchange => "update_value('service_user','service_user', 'string')"}
    %p
      %label{ :for => :service_password }= t('.service_password')
      %input#service_password{:type => "text", :name => "service_password", :'data-default' => @proposal.raw_data['attributes'][@proposal.barclamp]["service_password"], :onchange => "update_value('service_password','service_password', 'string')"}
    %p
      %label{ :for => :volume_header }= t('.volume_header')
    %div.container
      %p
        %label{ :for => :volume_name }= t('.volume_name')
        %input#volume_name{:type => "text", :name => "volume_name", :'data-default' => @proposal.raw_data['attributes'][@proposal.barclamp]["volume"]["volume_name"], :onchange => "update_value('volume/volume_name','volume_name', 'string')"}
      %p
        %label{ :for => :volume_type }= t('.volume_type')
        = select_tag :volume_type, options_for_select([['raw','raw'], ['local', 'local'], ['eqlx','eqlx']], @proposal.raw_data['attributes'][@proposal.barclamp]["volume"]["volume_type"].to_s), :onchange => "update_view();update_value('volume/volume_type', 'volume_type', 'string')"
      %div{ :id => 'eqlx_parameters', :class => 'container' }
        %p
          %label{ :for => :eqlx_header }= t('.eqlx_parameters')
        %div.container
          %label{ :for => :san_ip }= t('.eqlx_san_ip')
          %input#san_ip{:type => "text", :name => "san_ip", :'data-default' => @proposal.raw_data['attributes'][@proposal.barclamp]["volume"]["eqlx"]["san_ip"], :onchange => "update_value('volume/eqlx/san_ip', 'san_ip', 'string')"}
          %p
            %label{ :for => :san_login }= t('.eqlx_san_login')
            %input#san_login{:type => "text", :name => "san_login", :'data-default' => @proposal.raw_data['attributes'][@proposal.barclamp]["volume"]["eqlx"]["san_login"], :onchange => "update_value('volume/eqlx/san_login', 'san_login', 'string')"}
          %p
            %label{ :for => :san_password }= t('.eqlx_san_password')
            %input#san_password{:type => "text", :name => "san_password", :'data-default' => @proposal.raw_data['attributes'][@proposal.barclamp]["volume"]["eqlx"]["san_password"], :onchange => "update_value('volume/eqlx/san_password', 'san_password', 'string')"}
          %p
            %label{ :for => :eqlx_group_name }= t('.eqlx_group_name')
            %input#eqlx_group_name{:type => "text", :name => "eqlx_group_name", :'data-default' => @proposal.raw_data['attributes'][@proposal.barclamp]["volume"]["eqlx"]["eqlx_group_name"], :onchange => "update_value('volume/eqlx/eqlx_group_name', 'eqlx_group_name', 'string')"}
          %p
            %label{ :for => :eqlx_pool }= t('.eqlx_pool')
            %input#eqlx_pool{:type => "text", :name => "eqlx_pool", :'data-default' => @proposal.raw_data['attributes'][@proposal.barclamp]["volume"]["eqlx"]["eqlx_pool"], :onchange => "update_value('volume/eqlx/eqlx_pool', 'eqlx_pool', 'string')"}
          %p
            %label{ :for => :san_thin_provision }= t('.eqlx_san_thin_provision')
            = select_tag :san_thin_provision, options_for_select([['yes','true'], ['no', 'false']], @proposal.raw_data['attributes'][@proposal.barclamp]["volume"]["eqlx"]["san_thin_provision"].to_s), :onchange => "update_value('volume/eqlx/san_thin_provision', 'san_thin_provision', 'boolean')"
          %p
            %label{ :for => :eqlx_use_chap }= t('.eqlx_use_chap')
            = select_tag :eqlx_use_chap, options_for_select([['yes','true'], ['no', 'false']], @proposal.raw_data['attributes'][@proposal.barclamp]["volume"]["eqlx"]["eqlx_use_chap"].to_s), :onchange => "update_value('volume/eqlx/eqlx_use_chap', 'eqlx_use_chap', 'boolean')"
          %p
            %label{ :for => :eqlx_chap_login }= t('.eqlx_chap_login')
            %input#eqlx_chap_login{:type => "text", :name => "eqlx_chap_login", :'data-default' => @proposal.raw_data['attributes'][@proposal.barclamp]["volume"]["eqlx"]["eqlx_chap_login"], :onchange => "update_value('volume/eqlx/eqlx_chap_login', 'eqlx_chap_login', 'string')"}
          %p
            %label{ :for => :eqlx_chap_password }= t('.eqlx_chap_password')
            %input#eqlx_chap_password{:type => "text", :name => "eqlx_chap_password", :'data-default' => @proposal.raw_data['attributes'][@proposal.barclamp]["volume"]["eqlx"]["eqlx_chap_password"], :onchange => "update_value('volume/eqlx/eqlx_chap_password', 'eqlx_chap_password', 'string')"}
          %p
            %label{ :for => :eqlx_ssh_keepalive_interval }= t('.eqlx_ssh_keepalive_interval')
            %input#eqlx_ssh_keepalive_interval{:type => "text", :name => "eqlx_ssh_keepalive_interval", :'data-default' => @proposal.raw_data['attributes'][@proposal.barclamp]["volume"]["eqlx"]["eqlx_ssh_keepalive_interval"], :onchange => "update_value('volume/eqlx/eqlx_ssh_keepalive_interval', 'eqlx_ssh_keepalive_interval', 'integer')"}
          %p
            %label{ :for => :eqlx_cli_timeout }= t('.eqlx_cli_timeout')
            %input#eqlx_cli_timeout{:type => "text", :name => "eqlx_cli_timeout", :'data-default' => @proposal.raw_data['attributes'][@proposal.barclamp]["volume"]["eqlx"]["eqlx_cli_timeout"], :onchange => "update_value('volume/eqlx/eqlx_cli_timeout', 'eqlx_cli_timeout', 'integer')"}
      %div{ :id => 'volume_file_parameters', :class => 'container' }
        %label{ :for => :file_header }= t('.volume_file_parameters')
        %div.container
          %label{ :for => :local_file }= t('.volume_file_name')
          %input#local_file{:type => "text", :name => "local_file", :'data-default' => @proposal.raw_data['attributes'][@proposal.barclamp]["volume"]["local_file"], :onchange => "update_value('volume/local_file','local_file', 'string')"}
          %p
          %label{ :for => :local_size }= t('.volume_file_size')
          %input#local_size{:type => "text", :name => "local_size", :'data-default' => @proposal.raw_data['attributes'][@proposal.barclamp]["volume"]["local_size"], :onchange => "update_value('volume/local_size','local_size', 'integer')"}
      %div{ :id => 'volume_disk_parameters', :class => 'container' }
        %label{ :for => :raw_header }= t('.volume_disk_parameters')
        %div.container
          %label{ :for => :cinder_raw_method }= t('.volume_raw_mode')
          = select_tag :cinder_raw_method, options_for_select([['first','first'], ['all', 'all'], ['selected', 'selected']], @proposal.raw_data['attributes'][@proposal.barclamp]["volume"]["cinder_raw_method"].to_s), :onchange => "update_value('volume/cinder_raw_method', 'cinder_raw_method', 'string')"
        %div{ :id => 'cinder_volume_disks', :class => 'container' }
          %label{ :for => :volume_disks }= t('.cinder_volume_disks')
          %ul{ :id => 'cinder_volume_disks_list', :style => "list-style: none;"}

:javascript

  var volume_role = 'cinder-volume';
  var volume_path = 'div.column_50 div ul#' + volume_role + '.ddlist';
  var volume_disk_list_path = 'ul#cinder_volume_disks_list';

  function update_cinder_disks(){
    var inputs = $("li input:checked", volume_disk_list_path);
    var disks = {};
    $.each(inputs, function(){
      var node = disks[$(this).attr('node')]
      if (node == undefined) {
        disks[$(this).attr('node')] = []
      }
      disks[$(this).attr('node')].push($(this).attr('disk'));
    });
    var proposal_input = $("input#proposal_attributes");
    var proposal_data = JSON.parse(proposal_input.val());
    proposal_data['volume']['cinder_volume_disks'] = disks;
    proposal_input.val(JSON.stringify(proposal_data));
  }

  function make_disk_list(node, alias, disks){
    if ($.isEmptyObject(disks)){
      i18n_msg('warning', alias, volume_role, 'It has no suitable disk for cinder-volume storage. '
                                           + 'If applyed, regular file will be used for volume group');
    };
    $.each(disks, function(disk, size){
      if ($('input[node="'+node+'"][disk="'+disk+'"]').length == 0) {
        $(volume_disk_list_path).append(
          $("<li>")
            .append(
              $("<input>")
                .attr('type', 'checkbox')
                .attr('name', "disks["+node+"]["+disk+"]")
                .attr('node', node)
                .attr('disk', disk)
                .attr('onClick',"update_cinder_disks()")
            )
            .append(
              $("<label>")
                .html(disk + ", size: " + size + " sectors [" + alias + "]")
            )
        );
      }
    });
  }

  function on_role_change(callback, param) {
    var nodes = [];
    $('li', volume_path).each(function() { nodes.push($(this).attr('id')); });
    $.each (nodes,function() {
      var node = this.toString();
      $.getJSON(
        '/cinder/node_disks?id=' + node,
        function(data) {
          make_disk_list(node, data.alias, data.disks);
          if (callback){
            callback(param);
          }
        }
      );
    });
  }

  function check_disks_loaded_from_proposal(disks){
    var inputs = $("li input", volume_disk_list_path);
    $.each(disks,function(node,devices){
      $.each(devices,function(){
        $('[node="'+node.toString()+'"][disk="'+this.toString()+'"]',volume_disk_list_path).attr("checked",true);
      });
    });
  }

  function load_proposal_disk_attrs() {
    var proposal_data = JSON.parse($("input#proposal_attributes").val());
    var disks = proposal_data['volume']['cinder_volume_disks'];
    on_role_change(check_disks_loaded_from_proposal, disks);
  }


  function update_view() {
    var proposal_data = JSON.parse($("input#proposal_attributes").val());
    var choice = $("select#volume_type").val();
    if (choice == 'eqlx') {
      $('div#eqlx_parameters').show();
      $('div#volume_file_parameters').hide();
      $('div#volume_disk_parameters').hide();
    } else {
      $('div#eqlx_parameters').hide();
      $('div#volume_file_parameters').show();
      $('div#volume_disk_parameters').show();
    }
  }

  $(document).ready(function(){
    update_view();
    load_proposal_disk_attrs();
  });

  // HACK HACK HACK
  // TODO: figure out the better way of overriding this functions
  window.setTimeout(function(){

    messages['warning'] = 'Warning: Avoid using Node [0] to Role [1]. [2]';
    messages['no_disks_checked'] = 'Warning: If no one of disks from the list are checked, '
                                 + 'will use any suitable disk from it for the volume group';

    var org_drop_item = this.drop_item;
    var org_remove_item = this.remove_item;

    this.drop_item = function(name, list) {
            var vall = org_drop_item(name, list);
            if (vall && list == volume_role) {
              on_role_change();
            }
            return vall;
    }

    this.remove_item = function(name, list) {
            var vall = org_remove_item(name, list);
            if (list == volume_role) {
              $('li input[node="'+name+'"]', volume_disk_list_path).parent().remove();
              update_cinder_disks();
            }
            return vall;
    }

  }, 0);
